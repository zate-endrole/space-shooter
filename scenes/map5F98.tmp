[gd_scene load_steps=5 format=3 uid="uid://cmv03jwgh57l3"]

[ext_resource type="Texture2D" uid="uid://c85u72qw8picf" path="res://resources/graphics/tilesets/soil.png" id="1_sx7md"]

[sub_resource type="TileSetAtlasSource" id="TileSetAtlasSource_vu41y"]
texture = ExtResource("1_sx7md")
texture_region_size = Vector2i(160, 160)
1:1/0 = 0
1:1/0/modulate = Color(0.482353, 0, 0.384314, 1)
1:1/0/physics_layer_0/linear_velocity = Vector2(0, 0)
1:1/0/physics_layer_0/angular_velocity = 0.0
2:1/0 = 0
2:1/0/modulate = Color(0.905882, 0.572549, 0.164706, 1)
2:1/0/physics_layer_0/linear_velocity = Vector2(0, 0)
2:1/0/physics_layer_0/angular_velocity = 0.0
1:2/0 = 0
1:2/0/modulate = Color(0.482353, 0, 0.384314, 1)
1:2/0/physics_layer_0/linear_velocity = Vector2(0, 0)
1:2/0/physics_layer_0/angular_velocity = 0.0
2:2/0 = 0
2:2/0/modulate = Color(0.905882, 0.572549, 0.164706, 1)
2:2/0/physics_layer_0/linear_velocity = Vector2(0, 0)
2:2/0/physics_layer_0/angular_velocity = 0.0
1:3/0 = 0
1:3/0/modulate = Color(0.482353, 0, 0.384314, 1)
1:3/0/physics_layer_0/linear_velocity = Vector2(0, 0)
1:3/0/physics_layer_0/angular_velocity = 0.0
1:4/0 = 0
1:4/0/modulate = Color(0.482353, 0, 0.384314, 1)
1:4/0/physics_layer_0/linear_velocity = Vector2(0, 0)
1:4/0/physics_layer_0/angular_velocity = 0.0
3:1/0 = 0
3:1/0/modulate = Color(1, 0.776471, 0.627451, 1)
3:1/0/physics_layer_0/linear_velocity = Vector2(0, 0)
3:1/0/physics_layer_0/angular_velocity = 0.0
4:1/0 = 0
4:1/0/physics_layer_0/linear_velocity = Vector2(0, 0)
4:1/0/physics_layer_0/angular_velocity = 0.0
3:2/0 = 0
3:2/0/modulate = Color(1, 0.776471, 0.627451, 1)
3:2/0/physics_layer_0/linear_velocity = Vector2(0, 0)
3:2/0/physics_layer_0/angular_velocity = 0.0
3:3/0 = 0
3:3/0/modulate = Color(1, 0.776471, 0.627451, 1)
3:3/0/physics_layer_0/linear_velocity = Vector2(0, 0)
3:3/0/physics_layer_0/angular_velocity = 0.0
2:3/0 = 0
2:3/0/modulate = Color(0.905882, 0.572549, 0.164706, 1)
2:3/0/physics_layer_0/linear_velocity = Vector2(0, 0)
2:3/0/physics_layer_0/angular_velocity = 0.0
2:4/0 = 0
2:4/0/modulate = Color(0.905882, 0.572549, 0.164706, 1)
2:4/0/physics_layer_0/linear_velocity = Vector2(0, 0)
2:4/0/physics_layer_0/angular_velocity = 0.0
3:4/0 = 0
3:4/0/modulate = Color(1, 0.776471, 0.627451, 1)
3:4/0/physics_layer_0/linear_velocity = Vector2(0, 0)
3:4/0/physics_layer_0/angular_velocity = 0.0
4:4/0 = 0
4:4/0/physics_layer_0/linear_velocity = Vector2(0, 0)
4:4/0/physics_layer_0/angular_velocity = 0.0
4:3/0 = 0
4:3/0/physics_layer_0/linear_velocity = Vector2(0, 0)
4:3/0/physics_layer_0/angular_velocity = 0.0
4:2/0 = 0
4:2/0/physics_layer_0/linear_velocity = Vector2(0, 0)
4:2/0/physics_layer_0/angular_velocity = 0.0

[sub_resource type="TileSet" id="TileSet_pqj3y"]
tile_size = Vector2i(160, 160)
physics_layer_0/collision_layer = 1
sources/0 = SubResource("TileSetAtlasSource_vu41y")

[sub_resource type="GDScript" id="GDScript_vop1f"]
script/source = "extends TileMap

var seed: int = randi()

var moisture = FastNoiseLite.new()
var temperature = FastNoiseLite.new()
var altitude = FastNoiseLite.new()

var width: int = 10
var height: int = 14

# Called when the node enters the scene tree for the first time.
func _ready():
	moisture.seed = seed
	temperature.seed = randi()
	altitude.seed = randi()

# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	generate_tile($\"../Player\".global_position)
	
func generate_object(target_position, code):
	
	print(code)
		
	#var objects: Array = [
	#	preload(\"res://scenes/drone.tscn\")
	#]
	
	#var object: StaticBody2D = objects[randi() % objects.size()].instantiate()
	#object.
	#$\"../ObjectsGroup\".add_child(object)
	#create_enemy.emit(enemy, $\"../Player\".position + Vector2(500, 0).rotated(randf_range(0, 2*PI)))
	

func generate_tile(target_position):
	var tile_position = local_to_map(target_position)
	for x in range(width):
		for y in range(height):
			var moist = moisture.get_noise_2d(tile_position.x - width / 2 + x, tile_position.y - height / 2 + y) * 10
			var temp = temperature.get_noise_2d(tile_position.x - width / 2 + x, tile_position.y - height / 2 + y) * 10
			var alt = altitude.get_noise_2d(tile_position.x - width / 2 + x, tile_position.y - height / 2 + y) * 10
			
			var selected_position = Vector2i(tile_position.x - width / 2 + x, tile_position.y - height / 2 + y)
			
			generate_object(selected_position, snapped(moist, 0.1))
			
			
			if alt < 2:
				set_cell(0, selected_position, 0, Vector2i(3, round(temp + 10) / 5))
			else:
				set_cell(0, selected_position, 0, Vector2i(round(moist + 10) / 5, round(temp + 10) / 5))
"

[node name="MapGenerator" type="TileMap"]
tile_set = SubResource("TileSet_pqj3y")
format = 2
script = SubResource("GDScript_vop1f")
